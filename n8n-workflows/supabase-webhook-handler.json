{
  "name": "Supabase Database Webhook Handler",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "trade-webhook",
        "responseMode": "onReceived",
        "responseData": "success",
        "options": {}
      },
      "id": "webhook-receiver",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "trade-webhook"
    },
    {
      "parameters": {
        "functionCode": "// Validate webhook secret\nconst webhookSecret = $input.first().headers['x-webhook-secret'];\nconst expectedSecret = 'trade-ease-webhook-secret-2024-secure'; // Same secret as in SQL\n\nif (webhookSecret !== expectedSecret) {\n  throw new Error('Invalid webhook secret');\n}\n\n// Extract webhook data\nconst { table, action, old: oldData, new: newData, timestamp } = $input.first().json;\n\n// Process based on action type\nlet processedData = {\n  table,\n  action,\n  timestamp,\n  changes: {}\n};\n\nswitch (action) {\n  case 'INSERT':\n    processedData.data = newData;\n    processedData.message = `New ${table} record created`;\n    break;\n    \n  case 'UPDATE':\n    // Calculate what changed\n    if (oldData && newData) {\n      for (const key in newData) {\n        if (oldData[key] !== newData[key]) {\n          processedData.changes[key] = {\n            old: oldData[key],\n            new: newData[key]\n          };\n        }\n      }\n    }\n    processedData.data = newData;\n    processedData.message = `${table} record updated`;\n    break;\n    \n  case 'DELETE':\n    processedData.data = oldData;\n    processedData.message = `${table} record deleted`;\n    break;\n}\n\nreturn [processedData];"
      },
      "id": "process-webhook",
      "name": "Process Webhook Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.action }}",
              "operation": "equals",
              "value2": "INSERT"
            }
          ]
        }
      },
      "id": "check-action",
      "name": "Check Action Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "functionCode": "// Handle new trade creation\nconst trade = $input.first().data;\n\n// Example: Send notifications\nconst notifications = [];\n\n// Notify buyer\nnotifications.push({\n  user_id: trade.buyer_id,\n  type: 'trade_created',\n  title: 'Trade Created',\n  message: `Your trade ${trade.id} has been created`,\n  data: {\n    trade_id: trade.id,\n    amount: trade.amount\n  }\n});\n\n// Notify seller\nnotifications.push({\n  user_id: trade.seller_id,\n  type: 'new_trade_order',\n  title: 'New Trade Order',\n  message: `You have a new trade order ${trade.id}`,\n  data: {\n    trade_id: trade.id,\n    amount: trade.amount\n  }\n});\n\nreturn notifications;"
      },
      "id": "handle-insert",
      "name": "Handle Insert",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 200]
    },
    {
      "parameters": {
        "functionCode": "// Handle trade updates\nconst changes = $input.first().changes;\nconst trade = $input.first().data;\nconst actions = [];\n\n// Check what changed\nif (changes.status) {\n  actions.push({\n    type: 'status_change',\n    from: changes.status.old,\n    to: changes.status.new,\n    trade_id: trade.id\n  });\n  \n  // If status changed to 'completed', trigger completion workflow\n  if (changes.status.new === 'completed') {\n    actions.push({\n      type: 'trigger_completion',\n      trade_id: trade.id\n    });\n  }\n}\n\nif (changes.amount) {\n  actions.push({\n    type: 'amount_change',\n    from: changes.amount.old,\n    to: changes.amount.new,\n    trade_id: trade.id\n  });\n}\n\nreturn actions;"
      },
      "id": "handle-update",
      "name": "Handle Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "functionCode": "// Handle trade deletion\nconst trade = $input.first().data;\n\n// Clean up related data\nconst cleanupTasks = [\n  {\n    type: 'cancel_notifications',\n    trade_id: trade.id\n  },\n  {\n    type: 'archive_documents',\n    trade_id: trade.id\n  },\n  {\n    type: 'notify_deletion',\n    users: [trade.buyer_id, trade.seller_id],\n    message: `Trade ${trade.id} has been cancelled`\n  }\n];\n\nreturn cleanupTasks;"
      },
      "id": "handle-delete",
      "name": "Handle Delete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/notifications",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_SERVICE_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_SERVICE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}"
      },
      "id": "send-notifications",
      "name": "Send to Supabase",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1050, 300]
    }
  ],
  "connections": {
    "webhook-receiver": {
      "main": [
        [
          {
            "node": "process-webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-webhook": {
      "main": [
        [
          {
            "node": "check-action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-action": {
      "main": [
        [
          {
            "node": "handle-insert",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "handle-update",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "handle-delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "handle-insert": {
      "main": [
        [
          {
            "node": "send-notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "handle-update": {
      "main": [
        [
          {
            "node": "send-notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "handle-delete": {
      "main": [
        [
          {
            "node": "send-notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "id": "supabase-webhook-handler"
} 