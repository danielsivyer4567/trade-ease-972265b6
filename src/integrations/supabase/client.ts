
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wxwbxupdisbofesaygqj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind4d2J4dXBkaXNib2Zlc2F5Z3FqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAwMDI0OTgsImV4cCI6MjA1NTU3ODQ5OH0.xhjkVsi9XZMwobUMsdYE0e1FXQeT_uNLaTHquGvRxjI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      // Remove the site URL since it's causing type errors
    }
  }
);

// Helper function to auto-purchase leads (updated to support organizations)
export const checkAndAutoPurchaseLeads = async (userId: string, organizationId?: string) => {
  try {
    console.log(`Checking auto-purchase leads for user: ${userId}, organization: ${organizationId || 'N/A'}`);
    
    // This is a mock function that simulates the auto-purchase flow
    // In a real implementation, this would interact with database tables
    // that aren't currently in the schema
    
    // Mock checking if auto-purchase is enabled
    const autoLeadEnabled = Math.random() > 0.5; // Randomly enabled/disabled for demo
    
    if (!autoLeadEnabled) {
      console.log("Auto-purchase not enabled for this user/organization");
      return;
    }
    
    // Mock preferences for demonstration
    const mockPreferences = {
      maxPerWeek: 3,
      minBudget: 5000,
      postcodes: ["2000", "2010", "2031"],
      preferredTypes: ["Kitchen Renovation", "Bathroom Remodel"]
    };
    
    // Mock check for already purchased leads this week
    const purchasedThisWeek = Math.floor(Math.random() * 3); // 0-2 already purchased
    console.log(`User/Organization has already purchased ${purchasedThisWeek} leads this week`);
    
    // Mock maximum per week from preferences
    const maxPerWeek = mockPreferences.maxPerWeek;
    
    if (purchasedThisWeek >= maxPerWeek) {
      console.log("User/Organization has reached their weekly limit");
      return;
    }
    
    // Mock available leads (for demonstration)
    const mockAvailableLeads = [
      {
        id: "lead-1",
        status: "available",
        budget_min: 8000,
        postcode: "2000",
        job_type: "Kitchen Renovation"
      },
      {
        id: "lead-2",
        status: "available",
        budget_min: 5500,
        postcode: "2031",
        job_type: "Bathroom Remodel"
      }
    ];
    
    // Filter leads by preferences (in a real app, this would be a database query)
    const matchingLeads = mockAvailableLeads.filter(lead => {
      // Check budget minimum
      if (lead.budget_min < mockPreferences.minBudget) {
        return false;
      }
      
      // Check postcode preference
      if (mockPreferences.postcodes.length > 0) {
        if (!mockPreferences.postcodes.includes(lead.postcode)) {
          return false;
        }
      }
      
      // Check job type preference
      if (mockPreferences.preferredTypes.length > 0) {
        if (!mockPreferences.preferredTypes.includes(lead.job_type)) {
          return false;
        }
      }
      
      return true;
    });
    
    // Purchase the first matching lead
    if (matchingLeads.length > 0) {
      const leadToPurchase = matchingLeads[0];
      console.log(`Auto-purchasing lead: ${leadToPurchase.id}`);
      
      // In a real implementation, this would update the lead status in the database
      // and record the purchase with the organization ID if provided
      if (organizationId) {
        console.log(`Lead purchased for organization: ${organizationId}`);
      }
      
      console.log("Lead auto-purchased successfully");
    } else {
      console.log("No matching leads found for auto-purchase");
    }
  } catch (error) {
    console.error("Error in auto-purchase process:", error);
  }
};
